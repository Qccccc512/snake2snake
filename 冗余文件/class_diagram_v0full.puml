@startuml 蛇对蛇游戏类图

title 蛇对蛇游戏 - OOP类图

' 配置层
package "配置层" {
    class GameConfig <<Singleton>> {
        - instance: GameConfig
        + GRID_SIZE: number
        + CELL_SIZE: number
        + GAME_WIDTH: number
        + GAME_HEIGHT: number
        + INITIAL_LENGTH: number
        + SNAKE_SPEED: number
        + GAME_DURATION: number
        + RESPAWN_DELAY: number
        + MAX_FOOD: number
        + FOOD_SPAWN_INTERVAL: number
        + FOOD_SPAWN_COUNT: number
        + FOOD_PROBABILITIES: object
        + SPEED_EFFECT_DURATION: number
        + MAGNET_EFFECT_DURATION: number
        + MAGNET_RANGE: number
        + SCORE_PER_FOOD: number
        + SCORE_PER_LENGTH: number
        + FOOD_DROP_RATE: number
        + COLORS: object
        + AI_SETTINGS: object
        --
        + getInstance(): GameConfig
        + updateFoodSpawnConfig(interval, count, maxFood)
        + updateFoodProbabilities(probabilities)
        + updateSnakeSpeed(speed)
        + reset()
    }
}

' 常量
package "常量" {
    class Direction <<Enum>> {
        + UP: object
        + DOWN: object
        + LEFT: object
        + RIGHT: object
    }
}

' 数据模型
package "数据模型" {
    class Position {
        + x: number
        + y: number
        --
        + equals(other): boolean
        + manhattanDistance(other): number
        + euclideanDistance(other): number
        + getNeighbors(): Position[]
        + getSurrounding(range): Position[]
        + clone(): Position
        + toString(): string
        + {static} fromString(str): Position
    }
    
    class GameStats {
        + totalGames: number
        + totalWins: number
        + totalDistance: number
        + totalFoodEaten: number
        + totalSpeedFoodEaten: number
        + totalSuperFoodEaten: number
        + totalMagnetFoodEaten: number
        + totalMineHit: number
        + totalDeaths: number
        + totalHeadToHeadCollisions: number
        + totalSelfCollisions: number
        + totalSpeedTime: number
        + currentDistance: number
        + currentFoodEaten: number
        + currentMaxLength: number
        + currentGameWon: boolean
        --
        + recordMove()
        + recordFoodEaten(type)
        + recordMineHit()
        + recordDeath(type)
        + updateMaxLength(length)
        + recordSpeedTime(seconds)
        + recordMagnetCollected(count)
        + markLostLeading()
        + endGame(isWin)
        + resetSession()
        + serialize(): object
        + {static} deserialize(data): GameStats
    }
    
    class Achievement {
        + id: string
        + name: string
        + description: string
        + type: string
        + unlocked: boolean
        --
        + check(stats): boolean
        + getProgressInfo(stats): object
        + unlock()
    }
}

' 核心系统
package "核心系统" {
    class Game {
        - config: GameConfig
        - state: string
        - session: GameSession
        - snakes: Snake[]
        - aiController: AIController
        - lastUpdate: number
        - animationFrameId: number
        - userManager: UserManager
        - collisionDetector: CollisionDetector
        - scoreManager: ScoreManager
        - timer: Timer
        - foodManager: FoodSpawner
        - respawnManager: RespawnManager
        - achievementSystem: AchievementSystem
        - renderer: Renderer
        - uiManager: UIManager
        - inputHandler: InputHandler
        --
        + setupSession(mode, user1, user2, difficulty)
        + start()
        + pause()
        + resume()
        + reset()
        + end()
        + update(time)
        - initializeSnakes()
        - initializeAI()
        - updateSnakes(snakesToMove)
        - handleCollisions()
        - handleFoodCollision()
        - checkAchievements()
        - updateRespawnTimers()
        - checkLeadingStatus()
        + startRenderLoop()
        + stopRenderLoop()
        - renderLoop(time)
        + isPaused(): boolean
        + destroy()
    }
    
    class User {
        + userId: string
        + userName: string
        + stats: GameStats
        + achievements: Achievement[]
        + createdAt: string
        + lastPlayedAt: string
        --
        + updateStats(statsDelta)
        + unlockAchievement(id): boolean
        + getUnlockedAchievements(): Achievement[]
        + getLockedAchievements(): Achievement[]
        + getAchievementProgress(): number
        + getLevel(): number
        + getWinRate(): number
        + serialize(): object
        + getSummary(): object
        + {static} deserialize(data): User
    }
    
    class GameSession {
        + player1User: User
        + player2User: User
        + gameMode: string
        + aiDifficulty: string
        --
        + setupSinglePlayer(user, difficulty)
        + setupTwoPlayers(user1, user2)
        + getPlayerUser(index): User
        + updatePlayerStats(index, statsDelta)
        + isValid(): boolean
        + getGameModeText(): string
        + getPlayerName(index): string
        + reset()
        + isAIMode(): boolean
        + isTwoPlayerMode(): boolean
    }
}

' 实体
package "实体" {
    abstract class Food {
        + position: Position
        + type: string
        + color: string
        --
        + {abstract} onEaten(snake, game)
        + render(ctx, cellSize)
    }
    
    class NormalFood extends Food {
        ' 普通豆子：蛇身长度+1，累积吃豆数+1
    }
    class SpeedFood extends Food {
        ' 加速豆子：触发速度效果，持续5秒
    }
    class SuperFood extends Food {
        ' 超级豆子：累积吃豆数+5，蛇身长度只+1
    }
    class MineFood extends Food {
        ' 地雷：调用game.respawnManager.handleDeath()触发死亡重生
    }
    class MagnetFood extends Food {
        ' 磁铁豆子：触发磁铁吸取效果，持续20秒
    }
    
    class Snake {
        + body: Position[]
        + bodySet: Set
        + direction: object
        + nextDirection: object
        + color: object
        + isAlive: boolean
        + foodEaten: number
        + grow: number
        + respawnTimer: number
        + respawnPosition: Position
        + moveAccumulator: number
        + effects: SnakeEffect[]
        + speedMultiplier: number
        + hasMagnetEffect: boolean
        + user: User
        --
        + move()
        + changeDirection(dir)
        + die(type)
        + respawn(x, y, dir)
        + addEffect(effect)
        + removeEffect(effect)
        + removeAllEffects()
        + hasEffect(type): boolean
        + updateEffects(game)
        + getHead(): Position
        + occupies(position): boolean
        + getSpeed(): number
        + getDropFoodCount(): number
    }
    
    abstract class SnakeEffect {
        + type: string
        + duration: number
        + startTime: number
        --
        + {abstract} apply(snake)
        + update(snake, game)
        + isExpired(): boolean
        + remove(snake)
        + getRemainingTime(): number
    }
    
    class SpeedEffect extends SnakeEffect
    class MagnetEffect extends SnakeEffect
}

' 管理器
package "管理器" {
    class FoodFactory <<Factory>> {
        - config: GameConfig
        --
        + createFood(position): Food
        + createFoodByType(type, position): Food
        + selectFoodType(): string
        + createMultipleFood(count, isValidPosition): Food[]
    }
    
    class FoodSpawner {
        - game: Game
        - config: GameConfig
        - foodFactory: FoodFactory
        - foods: Food[]
        - spawnTimer: any
        --
        + startSpawning()
        + stopSpawning()
        + spawnFood(count)
        + spawnFoodAt(position, type)
        + dropFoodFromSnake(snake)
        + removeFood(food)
        + isValidPosition(position): boolean
        + clear()
        + getFoods(): Food[]
        + getFoodCount(): number
    }
    
    class CollisionDetector <<Singleton>> {
        + checkWallCollision(snake): boolean
        + checkSelfCollision(snake): boolean
        + checkSnakeBodyCollision(snake, other): boolean
        + checkHeadToHeadCollision(s1, s2): boolean
        + checkFoodCollision(snake, foods): Food
        + detectAllCollisions(snakes): object
        + checkPositionOccupied(position, snakes): boolean
        + isInBounds(position): boolean
    }
    
    class ScoreManager {
        + calculateScore(snake): number
        + getAllScores(snakes): number[]
        + determineWinner(snakes): number
        + formatScore(score): string
    }
    
    class Timer {
        - config: GameConfig
        - timeRemaining: number
        - isRunning: boolean
        - intervalId: any
        - callbacks: object
        --
        + start()
        + pause()
        + resume()
        + stop()
        + reset()
        - tick()
        + onTick(callback)
        + onEnd(callback)
        + getRemainingTime(): number
        + formatTime(seconds): string
        + isActive(): boolean
    }
    
    class RespawnManager {
        - game: Game
        - config: GameConfig
        - collisionDetector: CollisionDetector
        - respawnQueue: array
        --
        + handleDeath(snake, type)
        + update(deltaTime)
        + findSafeRespawnPosition(): object
        - tryRespawn(snake)
        - isValidRespawnPosition(x, y, direction): boolean
        - forceRespawn(snake)
        - clearAreaForRespawn(x, y)
        + getRespawnTimeLeft(snake): number
        + clear()
    }
    
    class UserManager <<Singleton>> {
        - users: Map
        - storageKey: string
        --
        + createUser(name): User
        + getUser(id): User
        + deleteUser(id): boolean
        + getAllUsers(): User[]
        + getAllUserSummaries(): object[]
        + saveUserData(user)
        + saveAllUsers()
        + loadAllUsers()
        + getUserCount(): number
        + isUserNameAvailable(name): boolean
        + exportAllUsers(): string
        + importUsers(json): boolean
        + clearAllUsers()
    }
    
    class AchievementSystem {
        - game: Game
        - newlyUnlockedAchievements: array
        - achievementQueue: array
        --
        + checkAchievements(user, type): Achievement[]
        + checkAllPlayers()
        + checkCumulativeAchievements()
        + queueAchievementNotification(achievement, user)
        + getNextNotification(): object
        + hasNotifications(): boolean
        + clearNotifications()
        + getNewlyUnlockedAchievements(): array
        + reset()
        + getAchievementStats(user): object
        + getRecentAchievements(user, count): Achievement[]
        + getAlmostCompletedAchievements(user, threshold, count)
    }
}

' AI系统
package "AI系统" {
    abstract class AIController <<Strategy>> {
        + game: Game
        + difficulty: string
        + pathFinder: PathFinder
        + lastDecisionTime: number
        --
        + {abstract} makeDecision(snake): Direction
        # findNearestFood(position): Food
        # findBestFood(position, snake): Food
        # getSafeDirections(snake): Direction[]
    }
    
    class EasyAI extends AIController
    class NormalAI extends AIController
    class HardAI extends AIController
    
    class PathFinder {
        - game: Game
        - config: GameConfig
        --
        + manhattanDistance(start, end): number
        + evaluateDanger(pos, snake): number
        + evaluateStrategicValue(pos): number
        + findBestDirection(start, end, snake): Direction
        + estimatePathLength(start, end, snake): number
    }
}

' 渲染和输入
package "渲染和输入" {
    class Renderer {
        - canvas: HTMLCanvasElement
        - ctx: CanvasRenderingContext2D
        - config: GameConfig
        --
        + adjustSize()
        - initCanvas()
        - clear()
        + render(game)
        - renderGrid()
        - renderFood(foods)
        - renderSnakes(snakes)
        - renderEffects(snakes)
        - renderEyes(head, direction, color)
    }
    
    class UIManager {
        - game: Game
        --
        - initializeElements()
        + updateScores()
        + updateTimer(time)
        + updatePlayerNames()
        + showGameOverModal(winnerIndex)
        + hideGameOverModal()
        + showAchievementNotification(achievement, user)
        + updateButtons(state)
        + showStatusMessage(message)
        + hideStatusMessage()
        + showRespawnTimer(index, timeLeft, pos)
        + hideRespawnTimer(index)
    }
    
    class InputHandler {
        - game: Game
        - keyBindings: object
        - boundHandlers: object
        --
        + bindEvents()
        + unbindEvents()
        - handleKeyDown(event)
        - bindVirtualButtons()
        - handleVirtualButton(key)
    }
}

' 关系
Game "1" *-- "1" GameSession : 包含
Game "1" *-- "2" Snake : 管理
Game "1" *-- "1" FoodSpawner : 使用
Game "1" *-- "1" CollisionDetector : 使用
Game "1" *-- "1" ScoreManager : 使用
Game "1" *-- "1" Timer : 使用
Game "1" *-- "1" RespawnManager : 使用
Game "1" *-- "1" AchievementSystem : 使用
Game "1" *-- "1" Renderer : 使用
Game "1" *-- "1" UIManager : 使用
Game "1" *-- "1" InputHandler : 使用
Game "1" *-- "1" UserManager : 使用
Game "1" o-- "0..1" AIController : 使用

GameSession "1" o-- "1..2" User : 关联

User "1" *-- "1" GameStats : 包含
User "1" *-- "*" Achievement : 拥有

Snake "1" o-- "1" User : 关联
Snake "1" *-- "*" Position : 身体
Snake "1" *-- "*" SnakeEffect : 效果

FoodSpawner "1" *-- "*" Food : 管理
FoodSpawner "1" *-- "1" FoodFactory : 使用

RespawnManager "1" --> "1" CollisionDetector : 依赖

Food "1" *-- "1" Position : 位置

AIController <|-- EasyAI
AIController <|-- NormalAI
AIController <|-- HardAI
AIController "1" *-- "1" PathFinder : 使用

Food <|-- NormalFood
Food <|-- SpeedFood
Food <|-- SuperFood
Food <|-- MineFood
Food <|-- MagnetFood

SnakeEffect <|-- SpeedEffect
SnakeEffect <|-- MagnetEffect

@enduml

